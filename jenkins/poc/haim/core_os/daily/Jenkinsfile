pipeline {
    options {
        disableConcurrentBuilds()
    }
    agent {
        docker {
                label 'haim-cloud-governance-worker'
                image 'quay.io/athiru/centos-stream8-podman:latest'
                args  '--net="host" -u root -v /etc/postfix/main.cf:/etc/postfix/main.cf --privileged'
        }
    }
    environment {
        CORE_OS_ACCESS_KEY = credentials('core-os-access-key')
        CORES_OS_SECRET_KEY = credentials('core-os-secret-key')
        CORE_OS_S3_BUCKET_NAME = credentials('core-os-s3-bucket-name')
        AWS_IAM_USER_SPREADSHEET_ID = credentials('cloud-governance-aws-iam-user-spreadsheet-id')
        GOOGLE_APPLICATION_CREDENTIALS = credentials('cloud-governance-google-application-credentials')
        LDAP_HOST_NAME = credentials('redhat-ldap-hostname')
        ES_HOST = credentials('haim-cloud-governance-elasticsearch-url')
        ES_PORT = credentials('haim-cloud-governance-elasticsearch-port')
        SPREADSHEET_ID = credentials('cloud-governance-aws-iam-user-spreadsheet-id')

        contact2 = "athiruma@redhat.com"
    }
    stages {
        stage('Checkout') { // Checkout (git clone ...) the projects repository
           steps {
                 checkout scm
           }
        }
        stage('Initial Cleanup') {
            steps {
                 sh '''if [[ "$(podman images -q quay.io/ebattat/cloud-governance 2> /dev/null)" != "" ]]; then podman rmi -f $(podman images -q quay.io/ebattat/cloud-governance 2> /dev/null); fi'''
            }
        }
        stage('Run Policies for CoreOs Account') {
            steps {
                 sh 'python3 jenkins/poc/haim/core_os/daily/run_policies.py'
            }
        }
        stage('Finalize Cleanup') {
            steps {
                 sh '''if [[ "$(podman images -q quay.io/ebattat/cloud-governance 2> /dev/null)" != "" ]]; then podman rmi -f $(podman images -q quay.io/ebattat/cloud-governance 2> /dev/null); fi'''
                 deleteDir()
            }
        }
    }
    post {
        failure {
              script {
                msg = "Build error for ${env.JOB_NAME} ${env.BUILD_NUMBER} (${env.BUILD_URL})"
                emailext body: """\
            Jenkins job: ${env.BUILD_URL}\nSee the console output for more details:  ${env.BUILD_URL}consoleFull\n\n
            """,subject: msg, to: "${contact2}, ${contact2}, ${contact2}"
            }
          }
    }
}
